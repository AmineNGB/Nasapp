{"version":3,"sources":["images/bg.jpg","images/moon.png","images/mountain.png","images/road.png","components/Parralax.js","components/Home.js","components/NavBar.js","components/NasaPhoto.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Parralax","className","src","bg","id","alt","moon","mountain","road","Home","to","NavBar","apiKey","process","NasaPhoto","useState","photoData","setPhotoData","useEffect","a","fetch","res","json","data","fetchPhoto","media_type","url","title","onClick","modal","document","querySelector","photo","original","addEventListener","classList","add","frameborder","gesture","allow","date","copyright","explanation","hdurl","e","target","contains","remove","NotFound","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cddd594d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.5df9840d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/moon.d561442c.png\";","module.exports = __webpack_public_path__ + \"static/media/mountain.ecd840aa.png\";","module.exports = __webpack_public_path__ + \"static/media/road.d9d4d414.png\";","import React from 'react';\nimport bg from '../images/bg.jpg';\nimport moon from '../images/moon.png';\nimport mountain from '../images/mountain.png';\nimport road from '../images/road.png';\n\nconst Parralax = () => {\n   \n\n    return (\n        \n            <section className=\"bg-home\">\n                <img src={bg} id=\"bg\" alt=\"bg\"   />\n                <img src={moon} id=\"moon\" alt=\"moon\"/>\n                <img src={mountain} id=\"mountain\" alt=\"mountain\"/>\n                <img src={road} id=\"road\" alt=\"road\"/>\n                <h2 id=\"text\">NASApp</h2>\n            </section>\n        \n    );\n};\n\nexport default Parralax;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Parralax from './Parralax';\n\nconst  Home = () => {\n    return (\n        <div className=\"home\">\n            <Parralax />\n            <Link className=\"home-link\" to=\"/nasaphoto\">Voir La Photo Du Jour</Link>\n        </div>\n    );   \n};\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function NavBar() {\n    return (\n        <div className=\"navbar\">\n            <ul>\n               <Link className=\"navbar-link\" to=\"/\">Retour Ã  la page d'acceuil</Link>\n            </ul> \n        </div>\n    )\n    \n}","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\n\nconst apiKey = process.env.REACT_APP_NASAPP_KEY;\n\nconst NasaPhoto = () => {\n  const [photoData, setPhotoData] = useState(null);\n\n  useEffect(() => {\n    fetchPhoto();\n    async function fetchPhoto() {\n      const res = await fetch(\n        `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`\n      );\n      const data = await res.json();\n      setPhotoData(data);\n    }\n  }, []);\n\n  if (!photoData) return <div />;\n\n  const handleHD = () => {\n    const modal = document.querySelector(\".modal\");\n    const photo = document.querySelector(\".photo\");\n    const original = document.querySelector(\".full-img\");\n\n    photo.addEventListener(\"click\", () => {\n      modal.classList.add(\"open\");\n      original.classList.add(\"open\");\n    });\n  };\n\n  const handleOut = (e) => {\n    const modal = document.querySelector(\".modal\");\n    const original = document.querySelector(\".full-img\");\n\n    modal.addEventListener(\"click\", (e) => {\n      if (e.target.classList.contains(\"modal\")) {\n        modal.classList.remove(\"open\");\n        original.classList.remove(\"open\");\n      }\n    });\n  };\n\n  return (\n    <>\n      <NavBar />\n      <div className=\"content-container\">\n        {photoData.media_type === \"image\" ? (\n          <img\n            src={photoData.url}\n            alt={photoData.title}\n            onClick={handleHD}\n            className=\"photo\"\n          />\n        ) : (\n          <iframe\n            title=\"space-video\"\n            src={photoData.url}\n            frameborder=\"0\"\n            gesture=\"media\"\n            allow=\"encrypted-media\"\n            className=\"photo\"\n          />\n        )}\n        <div className=\"content\">\n          <h1>{photoData.title}</h1>\n          <p className=\"date\">{photoData.date}</p>\n          <p className=\"copyright\"> by: {photoData.copyright}</p>\n          <p className=\"explanation\">{photoData.explanation}</p>\n        </div>\n      </div>\n      <div className=\"modal\">\n        <img\n          src={photoData.hdurl}\n          alt=\"fullhd\"\n          onClick={handleOut}\n          className=\"full-img\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport default NasaPhoto;\n","import React from 'react';\n\nconst NotFound = () => {\n    return (\n        <div>\n            <img src=\"https://freefrontend.com/assets/img/html-css-404-page-templates/404-Not-Found-SVG.png\" alt=\"404\"/>\n        </div>\n    );\n};\n\nexport default NotFound;","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport Home from \"./components/Home\"\nimport NasaPhoto from \"./components/NasaPhoto\"\nimport NotFound from \"./components/NotFound\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n        <Switch>\n        <div className=\"app\">\n          <Route component={Home} path=\"/\" exact />\n          <Route component={NasaPhoto} path=\"/nasaphoto\" exact /> \n        </div>  \n        <Route component={NotFound} />\n        </Switch>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}